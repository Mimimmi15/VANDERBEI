# Vanderbei montre que le modèle avec la norme L2 est moins robuste aux valeurs aberrantes et échoue à extraire correctement le cycle solaire

using Pkg
Pkg.add("Plots")
Pkg.add("CSV")
Pkg.add("DataFrames")
Pkg.add("LinearAlgebra")
Pkg.add("Statistics")
Pkg.add("Printf")
using CSV, DataFrames, LinearAlgebra, Statistics, Printf, Plots

# ========================================================================================================================================================================
# 1. Chargement des données
# ========================================================================================================================================================================

# Adapter le chemin ci_dessous au chemin local de destination du dossier
df = CSV.read("C:/Users/fogue/Downloads/VANDERBEI-phase2/VANDERBEI-phase2/temperatures_clean.csv", DataFrame)
d = df.day
T = df.avg_temp
n = length(d)

# ========================================================================================================================================================================
# 2. Construction des prédicteurs
# ========================================================================================================================================================================
X = hcat(
    ones(n),                           # x0
    d,                                 # x1 : linéaire
    cos.(2π .* d ./ 365.25),          # x2 : saison (cos)
    sin.(2π .* d ./ 365.25),          # x3 : saison (sin)
    cos.(2π .* d ./ (10.7*365.25)),   # x4 : cycle solaire (cos)
    sin.(2π .* d ./ (10.7*365.25))    # x5 : cycle solaire (sin)
)

# ========================================================================================================================================================================
# 3. Résolution du modèle L2
# ========================================================================================================================================================================
β = X \ T
T_hat = X * β  # Prédictions

# ========================================================================================================================================================================
# 4. Affichage des résultats
# ========================================================================================================================================================================
@printf("\nRégression L2 - Résultats des coefficients :\n")
@printf("--------------------------------------------\n")
@printf("x0 = %.3f   x1 = %.6f (%.2f °F/siècle)\n", β[1], β[2], β[2]*365.25*100)
@printf("x2 = %.3f   x3 = %.3f\n", β[3], β[4])
@printf("x4 = %.3f   x5 = %.3f\n", β[5], β[6])

# ========================================================================================================================================================================
# 5. Graphe comparatif entre les données et le modèle
# ========================================================================================================================================================================
plot(d, T, label="Températures réelles", color=:blue, lw=1, alpha=0.5)
plot!(d, T_hat, label="Modèle L2 (moindres carrés)", color=:red, lw=2)
xlabel!("Jour depuis 01/01/1955")
ylabel!("Température moyenne (°F)")
title!("Comparaison : Données réelles vs Modèle L2")

#############################################################################################################################################
# Fonction de Prédiction L2
function predictions_L2(d, T)
    n = length(d)
    
    X = hcat(
        ones(n),
        d,
        cos.(2π .* d ./ 365.25),
        sin.(2π .* d ./ 365.25),
        cos.(2π .* d ./ (10.7*365.25)),
        sin.(2π .* d ./ (10.7*365.25))
    )
    
    return X \ T
end